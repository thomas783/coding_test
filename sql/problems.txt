<!-- Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
 i. Attribute table = 10000
 ii. Business table = 10000
 iii. Category table = 10000
 iv. Checkin table = 10000
 v. elite_years table = 10000
 vi. friend table = 10000
 vii. hours table = 10000
 viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

SELECT COUNT(*)
FROM table;


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = id : 10000
ii. Hours = business_id : 1562
iii. Category = business_id : 2643
iv. Attribute = business_id : 1115
v. Review = id : 10000
vi. Checkin = business_id : 493
vii. Photo = id : 10000
viii. Tip = user_id : 537
ix. User = id : 10000
x. Friend = user_id : 11
xi. Elite_years = user_id : 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

SELECT COUNT(DISTINCT(key))
FROM table;


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "NO"
	
	
	SQL code used to arrive at answer:
	SELECT COUNT(*)
	FROM user
	WHERE id IS NULL OR 
		name IS NULL OR 
		review_count IS NULL OR 
		yelping_since IS NULL OR
		useful IS NULL OR 
		funny IS NULL OR 
		cool IS NULL OR 
		fans IS NULL OR 
		average_stars IS NULL OR 
		compliment_hot IS NULL OR 
		compliment_more IS NULL OR 
		compliment_profile IS NULL OR 
		compliment_cute IS NULL OR 
		compliment_list IS NULL OR 
		compliment_note IS NULL OR 
		compliment_plain IS NULL OR 
		compliment_cool IS NULL OR 
		compliment_funny IS NULL OR 
		compliment_writer IS NULL OR 
		compliment_photos IS NULL 
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995

SELECT MIN(key), MAX(key), AVG(key)
FROM table;


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT City
	, SUM(review_count) AS review_sum
	FROM business
	GROUP BY City
	ORDER BY review_sum DESC
	
	
	Copy and Paste the Result Below:
	city            | review_sum |
	+-----------------+------------+
	| Las Vegas       |      82854 |
	| Phoenix         |      34503 |
	| Toronto         |      24113 |
	| Scottsdale      |      20614 |
	| Charlotte       |      12523 |
	| Henderson       |      10871 |
	| Tempe           |      10504 |
	| Pittsburgh      |       9798 |
	| Montréal        |       9448 |
	| Chandler        |       8112 |
	| Mesa            |       6875 |
	| Gilbert         |       6380 |
	| Cleveland       |       5593 |
	| Madison         |       5265 |
	| Glendale        |       4406 |
	| Mississauga     |       3814 |
	| Edinburgh       |       2792 |
	| Peoria          |       2624 |
	| North Las Vegas |       2438 |
	| Markham         |       2352 |
	| Champaign       |       2029 |
	| Stuttgart       |       1849 |
	| Surprise        |       1520 |
	| Lakewood        |       1465 |
	| Goodyear        |       1155 |
	+-----------------+------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT Stars, SUM(review_count) AS count
FROM business
WHERE City = 'Avon'
GROUP BY Stars;


Copy and Paste the Resulting Table Below (2 columns - star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |    10 |
|   2.5 |     6 |
|   3.5 |    88 |
|   4.0 |    21 |
|   4.5 |    31 |
|   5.0 |     3 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT Stars, SUM(review_count) AS count
FROM business
WHERE City = 'Beachwood'
GROUP BY Stars;

Copy and Paste the Resulting Table Below (2 columns - star rating and count):
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     8 |
|   2.5 |     3 |
|   3.0 |    11 |
|   3.5 |     6 |
|   4.0 |    69 |
|   4.5 |    17 |
|   5.0 |    23 |
+-------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT id,name,SUM(review_count) AS count
	FROM user
	GROUP BY id
	ORDER BY count DESC;
		
	Copy and Paste the Result Below:

	+------------------------+-----------+-------+
	| id                     | name      | count |
	+------------------------+-----------+-------+
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  2000 |
	| -3s52C4zL_DHRK0ULG6qtg | Sara      |  1629 |
	| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |  1339 |
		

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	Yes, and the time of they have been yelping correlates. 
	The longer they have been yelping and the more reviews they
	give have has a higher fan count.

	SELECT id,name,SUM(review_count) AS count
	, fans, yelping_since
	FROM user
	GROUP BY id
	ORDER BY fans DESC;

	+------------------------+-----------+-------+------+---------------------+
	| id                     | name      | count | fans | yelping_since       |
	+------------------------+-----------+-------+------+---------------------+
	| -9I98YbNQnLdAmcYfb324Q | Amy       |   609 |  503 | 2007-07-19 00:00:00 |
	| -8EnCioUmDygAbsYZmTeRQ | Mimi      |   968 |  497 | 2011-03-30 00:00:00 |
	| --2vR0DIsmQ6WfcSzKWigw | Harald    |  1153 |  311 | 2012-11-27 00:00:00 |
	| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  2000 |  253 | 2012-12-16 00:00:00 |
	| -0IiMAZI2SsQ7VmyzJjokQ | Christine |   930 |  173 | 2009-07-08 00:00:00 |
	| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |   813 |  159 | 2009-10-05 00:00:00 |
	| -9bbDysuiWeo2VShFJJtcw | Cat       |   377 |  133 | 2009-02-05 00:00:00 |
	| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  1215 |  126 | 2015-02-19 00:00:00 |
	| -9da1xk7zgnnfO1uTVYGkA | Fran      |   862 |  124 | 2012-04-05 00:00:00 |
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, the count of that contains word "love" is 1780,
	and "hate" is 232. 

	
	SQL code used to arrive at answer:

	SELECT COUNT(*)
	FROM review
	WHERE text LIKE '%love%';

	+----------+
	| COUNT(*) |
	+----------+
	|     1780 |
	+----------+

	SELECT COUNT(*)
	FROM review
	WHERE text LIKE '%hate%';

	+----------+
	| COUNT(*) |
	+----------+
	|      232 |
	+----------+


	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city 
or category by their overall star rating. Compare the businesses with 2-3 stars to 
the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

The 4-5 star group seems to have shorter hours than the 2-3 star group.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
Yes. 4-5 star group has more chance to have high review counts than 2-3 start group 

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No. postal_code are quite different.

SQL code used for analysis:

SELECT B.name,
			   B.review_count,
			   H.hours,
			   postal_code,
			   CASE
				  WHEN hours LIKE "%monday%" THEN 1
				  WHEN hours LIKE "%tuesday%" THEN 2
				  WHEN hours LIKE "%wednesday%" THEN 3
				  WHEN hours LIKE "%thursday%" THEN 4
				  WHEN hours LIKE "%friday%" THEN 5
				  WHEN hours LIKE "%saturday%" THEN 6
				  WHEN hours LIKE "%sunday%" THEN 7
			   END AS ord,
			   CASE
				  WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
				  WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
			   END AS star_rating
		FROM business B INNER JOIN hours H
		ON B.id = H.business_id
		INNER JOIN category C
		ON C.business_id = B.id
		WHERE (B.city == 'Las Vegas'
		AND
		C.category LIKE 'shopping')
		AND
		B.stars BETWEEN 2 AND 3
		OR
		B.stars BETWEEN 4 AND 5
		GROUP BY stars,ord
		ORDER BY ord,star_rating ASC
+--------------------+--------------+-----------------------+-------------+-----+-------------+
| name               | review_count | hours                 | postal_code | ord | star_rating |
+--------------------+--------------+-----------------------+-------------+-----+-------------+
| Walgreens          |            6 | Monday|8:00-22:00     | 89121       |   1 | 2-3 stars   |
| B.A. Sweetie Candy |           49 | Monday|10:00-20:00    | 44129       |   1 | 4-5 stars   |
| Oaks Golf Course   |            5 | Monday|7:00-19:00     | 53527       |   1 | 4-5 stars   |
| Red Apron Bakeshop |            5 | Monday|9:00-17:00     | 85249       |   1 | 4-5 stars   |
| Walgreens          |            6 | Tuesday|8:00-22:00    | 89121       |   2 | 2-3 stars   |
| B.A. Sweetie Candy |           49 | Tuesday|10:00-20:00   | 44129       |   2 | 4-5 stars   |
| Oaks Golf Course   |            5 | Tuesday|7:00-19:00    | 53527       |   2 | 4-5 stars   |
| Red Apron Bakeshop |            5 | Tuesday|9:00-17:00    | 85249       |   2 | 4-5 stars   |
| Walgreens          |            6 | Wednesday|8:00-22:00  | 89121       |   3 | 2-3 stars   |
| Edulis             |           89 | Wednesday|18:00-23:00 | M5V         |   3 | 4-5 stars   |
| Oaks Golf Course   |            5 | Wednesday|7:00-19:00  | 53527       |   3 | 4-5 stars   |
| Red Apron Bakeshop |            5 | Wednesday|9:00-17:00  | 85249       |   3 | 4-5 stars   |
| Walgreens          |            6 | Thursday|8:00-22:00   | 89121       |   4 | 2-3 stars   |
| Edulis             |           89 | Thursday|18:00-23:00  | M5V         |   4 | 4-5 stars   |
| Oaks Golf Course   |            5 | Thursday|7:00-19:00   | 53527       |   4 | 4-5 stars   |
| Red Apron Bakeshop |            5 | Thursday|9:00-17:00   | 85249       |   4 | 4-5 stars   |
| Walgreens          |            6 | Friday|8:00-22:00     | 89121       |   5 | 2-3 stars   |
| Edulis             |           89 | Friday|18:00-23:00    | M5V         |   5 | 4-5 stars   |
| Oaks Golf Course   |            5 | Friday|7:00-19:00     | 53527       |   5 | 4-5 stars   |
| Red Apron Bakeshop |            5 | Friday|9:00-17:00     | 85249       |   5 | 4-5 stars   |
| Walgreens          |            6 | Saturday|8:00-22:00   | 89121       |   6 | 2-3 stars   |
| Edulis             |           89 | Saturday|18:00-23:00  | M5V         |   6 | 4-5 stars   |
| Oaks Golf Course   |            5 | Saturday|7:00-19:00   | 53527       |   6 | 4-5 stars   |
| Red Apron Bakeshop |            5 | Saturday|9:00-17:00   | 85249       |   6 | 4-5 stars   |
| Walgreens          |            6 | Sunday|8:00-22:00     | 89121       |   7 | 2-3 stars   |
+--------------------+--------------+-----------------------+-------------+-----+-------------+

2. Group business based on the ones that are open and the ones that are 
closed. What differences can you find between the ones that are still 
open and the ones that are closed? List at least two differences and 
the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
business that are is_open tend to have higher average of review counts.
         
ii. Difference 2:
         
business that are is_open tend to have slightly higher average of stars.
         
SQL code used for analysis:

SELECT COUNT(DISTINCT(id)),
        COUNT(DISTINCT(name)),
        AVG(stars) AS stars_avg,
        SUM(review_count) AS review_sum,
        AVG(review_count) AS review_avg,
        is_open
FROM business AS b
GROUP BY b.is_open

+---------------------+-----------------------+---------------+------------+---------------+---------+
| COUNT(DISTINCT(id)) | COUNT(DISTINCT(name)) |     stars_avg | review_sum |    review_avg | is_open |
+---------------------+-----------------------+---------------+------------+---------------+---------+
|                1520 |                  1486 | 3.52039473684 |      35261 | 23.1980263158 |       0 |
|                8480 |                  7516 | 3.67900943396 |     269300 | 31.7570754717 |       1 |
+---------------------+-----------------------+---------------+------------+---------------+---------+

3. For this last part of your analysis, you are going to choose 
the type of analysis you want to conduct on the Yelp dataset and are 
going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes 
for sentiment analysis, clustering businesses to find commonalities or 
anomalies between them, predicting the overall star rating for a business, 
predicting the number of fans a user will have, and so on. These are just 
a few examples to get you started, so feel free to be creative and come up 
with your own problem you want to solve. Provide answers, in-line, to all 
of the following:
	
i. Indicate the type of analysis you chose to do:
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
                  
iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset: -->